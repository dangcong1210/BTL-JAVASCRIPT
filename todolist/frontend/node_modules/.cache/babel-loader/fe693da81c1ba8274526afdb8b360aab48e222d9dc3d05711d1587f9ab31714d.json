{"ast":null,"code":"function getDueDateClass(dueDate) {\n  if (!dueDate) return {\n    className: '',\n    text: 'No date'\n  };\n  try {\n    const today = new Date();\n    const targetDate = new Date(dueDate);\n\n    // Check if date is valid\n    if (isNaN(targetDate.getTime())) {\n      return {\n        className: '',\n        text: 'Invalid date'\n      };\n    }\n    const diffTime = targetDate - today;\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    if (diffDays < 0) {\n      return {\n        className: 'expired',\n        text: 'Expired'\n      };\n    } else if (diffDays >= 0 && diffDays <= 1) {\n      return {\n        className: 'due-soon',\n        text: 'Today'\n      };\n    } else if (diffDays > 1 && diffDays <= 7) {\n      return {\n        className: 'due-upcoming',\n        text: `${diffDays} days left`\n      };\n    } else {\n      return {\n        className: 'due-later',\n        text: ''\n      };\n    }\n  } catch (error) {\n    console.error('Error processing date:', error);\n    return {\n      className: '',\n      text: 'Invalid date'\n    };\n  }\n}\nexport default getDueDateClass;","map":{"version":3,"names":["getDueDateClass","dueDate","className","text","today","Date","targetDate","isNaN","getTime","diffTime","diffDays","Math","ceil","error","console"],"sources":["/Users/neo/Desktop/todolist/frontend/src/components/utils/dateUtils.js"],"sourcesContent":["function getDueDateClass(dueDate) {\n    if (!dueDate) return { className: '', text: 'No date' };\n    \n    try {\n        const today = new Date();\n        const targetDate = new Date(dueDate);\n        \n        // Check if date is valid\n        if (isNaN(targetDate.getTime())) {\n            return { className: '', text: 'Invalid date' };\n        }\n\n        const diffTime = targetDate - today;\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n        if (diffDays < 0) {\n            return { className: 'expired', text: 'Expired' };\n        } else if (diffDays >= 0 && diffDays <= 1) {\n            return { className: 'due-soon', text: 'Today' };\n        } else if (diffDays > 1 && diffDays <= 7) {\n            return { className: 'due-upcoming', text: `${diffDays} days left` };\n        } else {\n            return { className: 'due-later', text: '' };\n        }\n    } catch (error) {\n        console.error('Error processing date:', error);\n        return { className: '', text: 'Invalid date' };\n    }\n}\n\nexport default getDueDateClass;\n"],"mappings":"AAAA,SAASA,eAAeA,CAACC,OAAO,EAAE;EAC9B,IAAI,CAACA,OAAO,EAAE,OAAO;IAAEC,SAAS,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAU,CAAC;EAEvD,IAAI;IACA,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;IACxB,MAAMC,UAAU,GAAG,IAAID,IAAI,CAACJ,OAAO,CAAC;;IAEpC;IACA,IAAIM,KAAK,CAACD,UAAU,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE;MAC7B,OAAO;QAAEN,SAAS,EAAE,EAAE;QAAEC,IAAI,EAAE;MAAe,CAAC;IAClD;IAEA,MAAMM,QAAQ,GAAGH,UAAU,GAAGF,KAAK;IACnC,MAAMM,QAAQ,GAAGC,IAAI,CAACC,IAAI,CAACH,QAAQ,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IAE5D,IAAIC,QAAQ,GAAG,CAAC,EAAE;MACd,OAAO;QAAER,SAAS,EAAE,SAAS;QAAEC,IAAI,EAAE;MAAU,CAAC;IACpD,CAAC,MAAM,IAAIO,QAAQ,IAAI,CAAC,IAAIA,QAAQ,IAAI,CAAC,EAAE;MACvC,OAAO;QAAER,SAAS,EAAE,UAAU;QAAEC,IAAI,EAAE;MAAQ,CAAC;IACnD,CAAC,MAAM,IAAIO,QAAQ,GAAG,CAAC,IAAIA,QAAQ,IAAI,CAAC,EAAE;MACtC,OAAO;QAAER,SAAS,EAAE,cAAc;QAAEC,IAAI,EAAE,GAAGO,QAAQ;MAAa,CAAC;IACvE,CAAC,MAAM;MACH,OAAO;QAAER,SAAS,EAAE,WAAW;QAAEC,IAAI,EAAE;MAAG,CAAC;IAC/C;EACJ,CAAC,CAAC,OAAOU,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO;MAAEX,SAAS,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAe,CAAC;EAClD;AACJ;AAEA,eAAeH,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}